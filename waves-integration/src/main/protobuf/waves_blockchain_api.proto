syntax = "proto3";

package waves.dex.grpc.integration;
option java_package = "com.wavesplatform.dex.grpc.integration.services";

import "transaction.proto";
import "google/protobuf/empty.proto";

service WavesBlockchainApi {
    rpc GetStatuses (TransactionsByIdRequest) returns (stream TransactionStatus);

    rpc Broadcast (BroadcastRequest) returns (BroadcastResponse);

    rpc IsFeatureActivated (IsFeatureActivatedRequest) returns (IsFeatureActivatedResponse);

    rpc AssetDescription (AssetIdRequest) returns (AssetDescriptionResponse);

    rpc HasAssetScript (AssetIdRequest) returns (HasScriptResponse);

    rpc RunAssetScript (RunAssetScriptRequest) returns (RunScriptResponse);

    rpc HasAddressScript (HasAddressScriptRequest) returns (HasScriptResponse);

    rpc RunAddressScript (RunAddressScriptRequest) returns (RunScriptResponse);

    rpc SpendableAssetBalance (SpendableAssetBalanceRequest) returns (SpendableAssetBalanceResponse);

    rpc ForgedOrder (ForgedOrderRequest) returns (ForgedOrderResponse);
}

// Common requests

message TransactionsByIdRequest {
    repeated bytes transaction_ids = 1;
}

message AssetIdRequest {
    bytes asset_id = 1;
}

// Common responses

message HasScriptResponse {
    bool has = 1;
}

message RunScriptResponse {
    // empty if there is no script or the script returned TRUE
    oneof result {
        string wrong_input = 1;
        string script_error = 2;
        string unexpected_result = 3;
        Exception exception = 4;
        google.protobuf.Empty denied = 5;
    }
}

// Specific requests and responses

message TransactionStatus {
    enum Status {
        NOT_EXISTS = 0;
        UNCONFIRMED = 1;
        CONFIRMED = 2;
    }

    bytes id = 1;
    Status status = 2;
    int64 height = 3;
}

message BroadcastRequest {
    SignedExchangeTransaction transaction = 1;
}

message BroadcastResponse {
    bool is_valid = 1;
}

message IsFeatureActivatedRequest {
    int32 feature_id = 1;
}

message IsFeatureActivatedResponse {
    bool is_activated = 1;
}

message AssetDescriptionResponse {
    oneof maybe_description {
        AssetDescription description = 1;
    }
}

message AssetDescription {
    bytes name = 1;
    int32 decimals = 2;
    bool has_script = 3; // TODO
}

message RunAssetScriptRequest {
    bytes asset_id = 1;
    SignedExchangeTransaction transaction = 2;
}

message RunAddressScriptRequest {
    bytes address = 1;
    Order order = 2;
}

message HasAddressScriptRequest {
    bytes address = 1;
}

message SpendableAssetBalanceRequest {
    bytes address = 1;
    waves.AssetId asset_id = 2;
}

message SpendableAssetBalanceResponse {
    int64 balance = 1;
}

message ForgedOrderRequest {
    bytes order_id = 1;
}

message ForgedOrderResponse {
    bool is_forged = 1;
}

// Other entities

message Exception {
    string name = 1;
    string message = 2;
}

// TODO Remove when the NODE will support OrderV3
message Order {
    enum Side {
        BUY = 0;
        SELL = 1;
    };

    message AssetPair {
        waves.AssetId amount_asset_id = 1;
        waves.AssetId price_asset_id = 2;
    };

    int32 chain_id = 1;
    bytes sender_public_key = 2;
    bytes matcher_public_key = 3;
    AssetPair asset_pair = 4;
    Side order_side = 5;
    int64 amount = 6;
    int64 price = 7;
    int64 timestamp = 8;
    int64 expiration = 9;
    waves.Amount matcher_fee = 10;
    int32 version = 11;
    repeated bytes proofs = 12;
    waves.AssetId matcher_fee_asset_id = 13;
}

message SignedExchangeTransaction {
    ExchangeTransaction transaction = 1;
    repeated bytes proofs = 2;
}

message ExchangeTransaction {
    int32 chain_id = 1;
    bytes sender_public_key = 2;
    waves.Amount fee = 3;
    int64 timestamp = 4;
    int32 version = 5;

    oneof data {
        ExchangeTransactionData exchange = 107;
    }
}

message ExchangeTransactionData {
    int64 amount = 1;
    int64 price = 2;
    int64 buy_matcher_fee = 3;
    int64 sell_matcher_fee = 4;
    repeated Order orders = 5;
    int32 taker = 6;
}
