pipeline {
    agent {
        label 'buildagent-matcher'
    }
    parameters {
        string(name: 'SBT_THREAD_NUMBER', defaultValue: '6', description: '')
    }
    environment {
        SBT_HOME = tool name: 'sbt-1.2.6', type: 'org.jvnet.hudson.plugins.SbtPluginBuilder$SbtInstallation'
        SBT_THREAD_NUMBER = "${SBT_THREAD_NUMBER}"
        SBT_OPTS = '-Xmx2g -XX:ReservedCodeCacheSize=128m -XX:+CMSClassUnloadingEnabled'
        SCALATEST_EXCLUDE_TAGS = 'com.wavesplatform.it.tags.DexItKafkaRequired com.wavesplatform.it.tags.DexItExternalKafkaRequired com.wavesplatform.it.tags.DexMultipleVersions'
        PATH = "${env.SBT_HOME}/bin:${env.PATH}"
    }
    stages {
        stage('Cleanup & Compile') {
            steps {
                script {
                    if (env.BRANCH_NAME !=~ /(DEX\-.*|version\-.*|master)/) {
                        currentBuild.result = 'ABORTED'
                        error('The branch have an incorrect name. Allowed names: master, version-, DEX-')
                    }
                }
                sh 'git fetch --tags'
                sh 'find ~/.sbt/1.0/staging/*/waves -type d -name target | xargs -I{} rm -rf {}'
                sh 'find . -type d -name target | xargs -I{} rm -rf {}'
                sh 'sbt "set Global / scalacOptions ++= Seq(\\"-Xfatal-warnings\\", \\"-Ywarn-unused:-imports\\");session save;cleanAll;compile"'
            }
        } 
        stage('Run Unit Tests') {
            steps { 
                sh 'sbt "waves-ext/test;waves-integration/test;dex/test"'
            }
        }        
        stage('Build Docker') {
            steps { 
                sh 'docker rmi com.wavesplatform/it com.wavesplatform/node-it com.wavesplatform/dex-it || true'
                sh 'sbt dex-it/docker'
            }
        }
        stage ('Run Integration Tests') {
            steps {
                sh 'sbt dex-it/test'
                build job: 'Waves.Exchange/Matcher/Push Docker Images', propagate: false, wait: false, parameters: [
                  [$class: 'StringParameterValue', name: 'BRANCH', value: "${BRANCH_NAME}"]
                ]
            }             
        }
    }
    post {
        always {
            sh 'tar zcf logs.tar.gz ./dex-it/target/logs* || true'
            archiveArtifacts artifacts: 'logs.tar.gz', fingerprint: true
            allure results: [[path: 'allure-results']]
            cleanWs()
        }
    }
}
